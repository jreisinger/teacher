#!/usr/bin/perl
# Vocabulary teacher.
use strict;
use warnings;
use 5.010;    # state
use Cwd qw(abs_path);
use File::Basename qw(dirname basename);
use List::Util qw(shuffle);

# How many phrases you wanna try
my $phrase_n = $ARGV[0] // 3;

# Where is the vocabulary stored
my $dictionary = dirname( abs_path($0) ) . '/dictionary';

# Store phrases we alredy know in this file
my $progname = basename($0);
$progname =~ s/(.*)/.$1/;
my $learned = $ENV{HOME} . '/' . $progname;

########################
sub readin_phrases
########################
{
    # Read in data and return them as a ref to HoH

    my @phrases;
    open my $fh, '<', $dictionary or die $!;
    local $/ = "\n\n";
    chomp( @phrases = <$fh> );
    close $fh;
    die "You don't have that many phrases\n" if $phrase_n > @phrases;
    my %phrases;

    for (@phrases)
    {
        next if /^#/;
        chomp;
        /<([^>]+)>[^<]+<([^>]+)>/;
        my $phrase = $_;
        my ( $foreign, $local ) = ( $1, $2 );
        $phrase =~ s/<$foreign>/<$local>/;
        $phrase =~ s/\s+<$local>$//;
        $phrases{$phrase} = { foreign => $foreign, local => $local };
    }

    return \%phrases;    # HoH
}

########################
sub readin_learned_phrases
########################
{
    my @phrases;
    open my $fh, '<', $learned or die $!;
    local $/ = "\n\n";
    chomp( @phrases = <$fh> );
    close $fh;

    return \@phrases;
}

########################
sub eval_word
########################
{
    # Did we input a correct word?

    my ( $foreign, $input ) = @_;
    state $length = 0;
    if ( $input eq $foreign )    # yes!
    {
        $length = 0;
        return 'ok';
    }
    elsif ( length($foreign) == $length )    # are we done yet?
    {
        $length = 0;
        return 'done';
    }
    else                                     # hint
    {
        return
          substr( $foreign, 0, $length++ )
          . '.' x ( length($foreign) - $length + 1 );
    }
}

########################
sub you_know_this
########################
{
    # Store phrase you learned
    my ( $phrase, $learned ) = @_;

    open my $fh, '>>', $learned
      or die "Can't opne '$learned' for appending: $!";
    print $fh $phrase . "\n\n";
    close $fh;
}

########################
sub know_this_already
########################
{
    # Check whether you knew this phrase
    my ( $phrase, $learned_phrases ) = @_;

    if ( grep $phrase eq $_, @$learned_phrases )
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

########################
# MAIN
########################

my $phrases         = readin_phrases;            # ref to HoH
my $learned_phrases = readin_learned_phrases;    # aref

# Remove phrases we know already
# http://www.perlmonks.org/?node_id=153402
for ( keys %$phrases )
{
    for my $learned (@$learned_phrases)
    {
        if ( $learned eq $_ )
        {
            delete $phrases->{$_};
        }
    }
}

# Let's got throught some randomly picked phrases
my $ok = 0;
my $i  = 0;
my ( $hint, $redoing );
for my $phrase ( shuffle keys %$phrases )
{
    ## redo comes here
    print $phrase, ' (', $hint // '', ') ', ' > ';

    chomp( my $input = <STDIN> );
    $hint = eval_word( $phrases->{$phrase}{foreign}, $input );
    if ( $hint eq 'ok' )
    {
        print "\nThat's it!\n\n";
        $ok++;
        $hint = '';
        if ( not $redoing )
        {
            you_know_this( $phrase, $learned );
        }
        $redoing = 0;
    }
    elsif ( $hint eq 'done' )
    {
        print "\nIt's '" . $phrases->{$phrase}{foreign} . "'\n\n";
        $hint    = '';
        $redoing = 0;
    }
    else
    {
        $redoing++;
        redo;
    }

    last if ++$i > $phrase_n;
}
## last comes here

print "I have no more phrases for you ...\n";
print "You got right $ok out of $i\n";
